// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/telkomsel/ticket/grule-service/internal/usecase/dicount_usecase.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/telkomsel/ticket/grule-service/internal/usecase/dicount_usecase.go -destination=D:/golang/src/telkomsel/ticket/grule-service/mock/discount_usecase_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/SyamSolution/grule-service/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscountExecutor is a mock of DiscountExecutor interface.
type MockDiscountExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockDiscountExecutorMockRecorder
}

// MockDiscountExecutorMockRecorder is the mock recorder for MockDiscountExecutor.
type MockDiscountExecutorMockRecorder struct {
	mock *MockDiscountExecutor
}

// NewMockDiscountExecutor creates a new mock instance.
func NewMockDiscountExecutor(ctrl *gomock.Controller) *MockDiscountExecutor {
	mock := &MockDiscountExecutor{ctrl: ctrl}
	mock.recorder = &MockDiscountExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscountExecutor) EXPECT() *MockDiscountExecutorMockRecorder {
	return m.recorder
}

// CheckDiscount mocks base method.
func (m *MockDiscountExecutor) CheckDiscount(eligible *model.Discount) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDiscount", eligible)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDiscount indicates an expected call of CheckDiscount.
func (mr *MockDiscountExecutorMockRecorder) CheckDiscount(eligible any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDiscount", reflect.TypeOf((*MockDiscountExecutor)(nil).CheckDiscount), eligible)
}
